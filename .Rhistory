pairs(mtcars,panel=panel.smooth,main="mtcars data",col=mtcars$cyl)
pairs(mtcars,panel=panel.smooth,main="mtcars data",col=mtcars$am)
unique(mtcars$am)
pairs(mtcars,panel=panel.smooth,main="mtcars data",col=3 + mtcars$am==1)
pairs(mtcars,panel=panel.smooth,main="mtcars data",col=3 + mtcars$am==0)
pairs(mtcars,panel=panel.smooth,main="mtcars data",col=mtcars$am)
summary(lm(mpg ~ ., data=mtcars))
?runif
runif(10)
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
?influence.measures
influence.measures(fit)
rstandard(fit)
dfbetas(fit)
summary(fit)$cov.unscaled[2,2]
vif(fit)
library(car)
vif(fit)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
names(segmentationOriginal)
set.seed(125)
InTrain = createDataPartition(y=segmentationOriginal$Case,p=0.7,list=FALSE)
training = segmentationOriginal[InTrain,]
testing = segmentationOriginal[-Intrain,]
dim(training);dim(testing)
set.seed(125)
InTrain = createDataPartition(y=segmentationOriginal$Case,p=0.7,list=FALSE)
training = segmentationOriginal[InTrain,]
testing = segmentationOriginal[-InTrain,]
dim(training);dim(testing)
modFit <- train(Case ~ . , method="rpart",data=training)
print(modFit$finalModel)
plot(modFit$finalModel,uniform=TRUE,main="Classification Tree")
text(modFit$finalModel, use.n=TRUE,all=TRUE,cex=0.8)
library(rattle)
table(segmentationOriginal$Case)
pr = predict(modFit,newdata=testing)
head(pr)
testing[segmentationOriginal=="23,000",1:10]
testing[segmentationOriginal=="23000",1:10]
testing[segmentationOriginal$TotalIntench2=="23000",1:10]
testing[segmentationOriginal$TotalIntench2=="23,000",1:10]
testing[segmentationOriginal$TotalIntench2=="50,000",1:10]
testing[segmentationOriginal$TotalIntench2=="50000",1:10]
testing[segmentationOriginal$TotalIntench2=="57000",1:10]
testing[segmentationOriginal$TotalIntench2=="57,000",1:10]
table(segmentationOriginal$TotalIntenCh1)
table(segmentationOriginal$TotalIntenCh1==57000)
table(segmentationOriginal$TotalIntenCh1==50000)
table(segmentationOriginal$TotalIntenCh1==23000)
t1 <- data.frame(TotalIntench2 = c(23000), FiberWidthCh1 = c(10), PerimStatusCh1=c(2))
t1
predit(modFit,newdata=t1)
predict(modFit,newdata=t1)
t1 <- testing[1,1]
t1
t1 <- testing[1,]
t1
t1$TotalIntenCh1=23000
t1$FiberWidthCh1=10
t1$PerimStatusCh1=2
predict(modFit,newdata=t1)
t2 <- t1
t2$PerimStatusCh1=100
t2 <- testing[1,]
t2$TotalIntenCh2=50000
t2$FiberWidthCh1=10
t2$PerimStatusCh1=100
predict(modFit,t2)
predict(modFit,newdata=t2)
?sample
t1 <- sample(segmentationOriginal,1)
dim(t1)
t1
rm(t1)
?random
rnorm(n=1)
integer(rnorm(n=1)*10)
integer(rnorm(n=1))
integer(rnorm(n=1)*100)
integer(rnorm(n=1)*1)
as.integer(rnorm(n=1)*1)
as.integer(rnorm(n=1)*10)
as.integer(rnorm(n=1)*10)
as.integer(rnorm(n=1)*10)
abs(as.integer(rnorm(n=1)*10))
t1 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t1$TotalIntench2 = 23000; t1$FiberWidthCh1 = 10; t1$PerimStatusCh1=2
predict(modFit,newdata=t1)
t2 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
t2 = ""
t2
sapply(t1, function(x) x="",1)
sapply(t1, function(t1[1,x]) t1[1,x]="",1)
sapply(t1, function(x]) t1[1,x]="",1)
sapply(t1, function(x) t1[1,x]="",1)
ncol(t1)
nrow(1)
for (i in seq(1:ncol(t1))) {
t1[1,i] = ""
}
t1
t1$TotalIntench2 = 23000; t1$FiberWidthCh1 = 10; t1$PerimStatusCh1=2
predict(modFit,newdata=t1)
names(t1)
t3<- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t3$TotalIntench2 = 57000; t3$FiberWidthCh1 = 8;t3$VarIntenCh4 = 100
predict(modFit,newdata=t3)
t4 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t4$FiberWidthCh1 = 8;t4$arIntenCh4 = 100; t4$PerimStatusCh1=2
predict(modFit,newdata=t4)
t1 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t1$TotalIntench2 = 23000; t1$FiberWidthCh1 = 10; t1$PerimStatusCh1=2
predict(modFit,newdata=t1)
t2 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
t3<- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t3$TotalIntench2 = 57000; t3$FiberWidthCh1 = 8;t3$VarIntenCh4 = 100
predict(modFit,newdata=t3)
t4 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t4$FiberWidthCh1 = 8;t4$arIntenCh4 = 100; t4$PerimStatusCh1=2
predict(modFit,newdata=t4)
t2 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
t2 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t2
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
t2 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
t1 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t1$TotalIntench2 = 23000; t1$FiberWidthCh1 = 10; t1$PerimStatusCh1=2
predict(modFit,newdata=t1)
t2 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
t3<- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t3$TotalIntench2 = 57000; t3$FiberWidthCh1 = 8;t3$VarIntenCh4 = 100
predict(modFit,newdata=t3)
t4 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t4$FiberWidthCh1 = 8;t4$arIntenCh4 = 100; t4$PerimStatusCh1=2
predict(modFit,newdata=t4)
for (i in seq(1:ncol(t1))) {
t1[1,i] = NA
}
t1$TotalIntench2 = 23000; t1$FiberWidthCh1 = 10; t1$PerimStatusCh1=2
predict(modFit,newdata=t1)
for (i in seq(1:ncol(t1))) {
t2[1,i] = NA
}
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
set.seed(125)
install.packages("rattle")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rattle)
set.seed(125)
training = segmentationOriginal[ segmentationOriginal$Case=="Train" ,]
testing = segmentationOriginal[segmentationOriginal$Case=="Test" ,]
dim(training);dim(testing)
modFit <- train( Class ~ ., method="rpart", data=training)
pr = predict(modFit,newdata=testing)
head(pr)
fancyRpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
t1 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t1$TotalIntench2 = 23000; t1$FiberWidthCh1 = 10; t1$PerimStatusCh1=2
predict(modFit,newdata=t1)
t1 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t1$TotalIntench2 = 23000; t1$FiberWidthCh1 = 10; t1$PerimStatusCh1=2
predict(modFit,newdata=t1)
t2 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t2$TotalIntench2 = 50000; t2$FiberWidthCh1 = 10;t2$VarIntenCh4 = 100
predict(modFit,newdata=t2)
t3<- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t3$TotalIntench2 = 57000; t3$FiberWidthCh1 = 8;t3$VarIntenCh4 = 100
predict(modFit,newdata=t3)
t4 <- segmentationOriginal[abs(as.integer(rnorm(n=1)*10)),]
t4$FiberWidthCh1 = 8;t4$arIntenCh4 = 100; t4$PerimStatusCh1=2
predict(modFit,newdata=t4)
t4$TotalIntench2 <- NA
t4$FiberWidthCh1 = 8;t4$arIntenCh4 = 100; t4$PerimStatusCh1=2
predict(modFit,newdata=t4)
t4
t4$TotalIntench2 <- NaN
t4$FiberWidthCh1 = 8;t4$arIntenCh4 = 100; t4$PerimStatusCh1=2
predict(modFit,newdata=t4)
library(pgmm)
data(olive)
olive = olive[,-1]
install.packages("pgpm")
install.packages("pgmm")
install.packages("pgmm")
install.packages("~/Downloads/pgmm_1.0.tar.gz",repos=NULL,type="source")
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
data(olive)
library(pgmm)
data(olive)
names(olive)
library(pgmm)
data(olive)
olive = olive[,-1]
dim(olive)
set.seed(125)
head(olive)
unique(olive$area)
unique(olive$Area)
intrain <- createDataPartition(olive$Area,p=0.5,list=FALSE)
training = olive[intrain,]
testing = olive[-intrain,]
dim(traing);dim(testing)
dim(training);dim(testing)
modFit <- train(Area ~ ., method="rpart", data=training)
head(training)
x <- is.na(training)
x
x <- complete.cases(training)
dim(x)
modFit <- train(Area ~ ., method="rpart", data=training)
library(rattle)
fancyRpartPlot(modFit$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata=newdata)
x <- testing[1,5]
x
x <- testing[5,]
x
predit(modFit,newdata=x)
predict(modFit,newdata=x)
str(olive)
olive$Area = as.character(olive$Area)
modFit <- train(Area ~ ., method="rpart", data=training)
fancyRpartPlot(modFit$finalModel)
intrain <- createDataPartition(olive$Area,p=0.5,list=FALSE)
training = olive[intrain,]
testing = olive[-intrain,]
modFit <- train(Area ~ ., method="rpart", data=training)
fancyRpartPlot(modFit$finalModel)
str(trainig)
str(training)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata=newdata)
x <- testing[5,]
predict(modFit,newdata=x)
modFit <- train(Area ~ ., method="rpart", data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(modFit,newdata=newdata)
x <- testing[5,]
predict(modFit,newdata=x)
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
names(trainSA)
set.seed(13234)
modFit <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl, method="glm",data=trainSA,family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
predict_trainSA = predict(modFit,newdata=trainSA)
predict_testSA = predict(modFit,newdata=testSA)
predict_trainSA
predict_trainSA[1]
trainSA[1,"chd"]
trainSA[1,c("chd")]
trainSA[5,c("chd")]
names(trainSA)
trainSA[5,10]
head(trainSA)
misClass(trainSA[,10],predict_trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
misClass(trainSA[,10],predict_trainSA)
missClass(trainSA[,10],predict_trainSA)
missClass(testSA[,10],predict_testSA)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.train)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train)
vowel.train$y <- as.factor(as.character(vowel.train))
str(vowel.train)
unique(vowel.train)
unique(vowel.train$y)
dim(vowel.train)
vowel.test$y <- as.factor(as.character(vowel.test))
dim(vowel.test)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(as.character(vowel.train$y))
vowel.train$y <- as.factor(as.character(vowel.train$y))
set.seed(33833)
modFit <- train(y ~ ., data=vowel.train,method="rf",prox=TRUE)
library(caret)
modFit <- train(y ~ ., data=vowel.train,method="rf",prox=TRUE)
modFit
?varlamp
?varlmp
?varImp
varImp(modFit)
varImp(modFit,scale=FALSE)
modFit <- train(y ~ ., data=vowel.train,method="rf")
varImp(modFit,scale=FALSE)
missClass(trainSA[1,10],predict_trainSA)
missClass(testSA[1,10],predict_testSA)
varImp(modFit)
data(mtcars)
names(mtcars)
str(mtcars)
modFit <- lm(mpg ~ as.factror(cyl) + wt, data=mtcars)
mtcars$cyl = as.factor(as.character(mtcars$cyl))
modFit <- lm(mpg ~ factror(cyl) + wt, data=mtcars)
data(mtcars)
modFit <- lm(mpg ~ cyl + wt, data=mtcars)
modFit
?lm
str(mtcars)
mtcars$cyl = as.factor(as.character(mtcars$cyl))
str(mtcars)
modFit <- lm(mpg ~ cyl + wt, data=mtcars)
modFit
summary(modFit)
str(mtcars)
plot(modFit)
?par
par(mfrow=2,mfcol=2)
par(mfrow=2,mfcol=2)
par(mfrow=c(2,2))
plot(modFit)
summary(modFit)
modFit1 <- lm(mpg ~ cyl * wt, data=mtcars)
summary(modFit1)
plot(modFit1)
lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
modFit2 <- lm(mpg ~ I(wt * 0.5) + factor(cyl), data = mtcars)
summary(modFit2)
summary(modFit)
modFit$coefficients
names(summary(modFit))
names(summary(modFit))$coefficients
summary(modFit)$coefficients
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
plot(x,y)
modFit_xy <- lm(y ~ x)
plot(modFit_xy)
modFit_xy$fitted.values
plot(x,modFit_xy$fitted.values)
plto(x,y)
plot(x,y)
hat(x)
hat(modFit_xy$fitted.values)
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
summary(modFit_xy)
names(modFit_xy)
modFit_xy$df.residual
modFit_xy$df.model
modFit_xy$model
class(modFit_xy$model)
class(modFit_xy$model$x)
plot(modFit_xy$model$x,modFit_xy$model$y)
modFit_xy$terms
anova(modFit_xy)
beta1hat=modFit_xy$coeff[2]
beta1hat
beta4hat=modFit_xy$coeff[4]
beta4hat
beta3hat
beta3hat=modFit_xy$coeff[3]
beta3hat
dfbetas(modFit_xy)
?dfbetas
anova(modFit,modFit1)
fit1 <- lm(mpg ~ factor(cyl) + wt , data=mtcars)
fit2 <- lm(mpg ~ factor(cyl) + wt + cyl*wt, data=mtcars)
anova(fit1,fit2)
installed.packages("lrtest")
install.packages("lrtest")
anova(fit1,fit2,test="F")
anova(fit1,fit2,test="Chisq")
summary(fit1)
summary(fit2)
help(mtcars)
library(shiny)
runApp("project")
setwd("~/coursera/data_products/project/")
runApp("project")
runApp("project")
setwd("~/coursera/data_products")
runApp("project")
help(mtcars)
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
runApp("project")
dir
setwd("~/coursera/data_products")
runApp("myshinyapp")
library(shinyapps)
deployApp()
pw
pwd
setwd("~/coursera/data_products/myshinyapp/")
deployApp()
setwd("~/coursera/data_products/myslidifypitch/")
author("Sasidhar Donaparthi")
library(slidify)
author("Sasidhar Donaparthi")
author("Sasi")
library(caret)
check_nulls <- function(data,colnames) {
for (i in seq(1,length(colnames))) {
print(colnames[i])
print(table(is.na(data[,c(i)])))
}
}
setwd("~/coursera/pml")
pml <- read.csv("pml-training.csv", na.string="#DIV/0!")
pml_test <- read.csv("pml-testing.csv", na.string="#DIV/0!")
pml_names <- names(pml)
## extracting the original data
x <- grep("_x$",pml_names)
pml_names[x]
y <- grep("_y$",pml_names)
pml_names[y]
z <- grep("_z$",pml_names)
pml_names[z]
mydata <- data.frame(pml[,x],pml[,y],pml[,z])
mydata$classe <- pml$classe
mydata_names <- names(mydata)
#check_nulls(mydata,mydata_names)
mydata_test <- data.frame(pml[,x],pml[,y],pml[,z])
mydata_test$classe <- pml_test$classe
#check_nulls(mydata,mydata_names)
dim(mydata_test)
mydata_test <- data.frame(pml_test[,x],pml_test[,y],pml_test[,z])
mydata_test$classe <- pml_test$classe
dim(pml_test)
m <- na.omit(mydata)
modFit <- train(classe ~ ., method="rpart",data=mydata)
plotcp(modFit)
plotcp(modFit$finalModel)
library(DAAG)
install.packages(DAAG)
install.packages("DAAG")
printcp(modFit$finalModel)
plot(modFit, uniform=TRUE,
main="Classification Tree for Kyphosis")
text(modFit, use.n=TRUE, all=TRUE, cex=.8)
post(modFit, file = "tree.ps",
title = "Classification Tree for Kyphosis"
)
post(modFit, file = "tree.ps",
title = "Classification Tree for Kyphosis")
post(modFit$finalModel, file = "tree.ps",
title = "Classification Tree for Kyphosis"
)
fit <- modFit$finalModel
xx <- fit$cptable[which.min(fit$cptable[,"xerror"]),"CP"]
fit$cptable[1:5]
fit$cptable[,"xerror"]
names(fit$cptable)
class(fit$cptable)
dim(fit$cptable)
fit$cptable
summary(residuals(modFit))
summary(residuals(modFit$finalModel))
fit$variable.importance
answers <- predict(modFit,newdata=pml_test)
answers
table(pml$classe)
qplot(classe, data=mydata, geom="density",fill=classe, alpha=I(0.5))
